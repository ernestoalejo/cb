package v0

import (
	"fmt"
	"strings"
)

type Field interface {
	Build(form *Form) string
}

type Form struct {
	// The original data file of this form
	Filename string

	// Name of the controller of the form
	Name string

	// Javascript function called when the form passed all the validations
	// and is sent. Without the () pair
	Submit string

	// Javascript function called each time the user try to send the form
	// Without the () pair
	TrySubmit string

	// Name of the client side object that will be scoped
	// with the values of the form
	ObjName string

	Fields     []Field
	Validators map[string][]*Validator
}

func (f *Form) Build() string {
	results := []string{}
	for _, field := range f.Fields {
		results = append(results, field.Build(f))
	}
	return fmt.Sprintf(`
<!-- AUTOGENERATED BY cb FROM %s, PLEASE, DON'T MODIFY IT -->
<form class="form-horizontal" name="%s" novalidate ng-init="%s.val = false;"
    ng-submit="%s.$valid && %s()"><fieldset>%s</fieldset></form>
  `, f.Filename, f.Name, f.Name, f.Name, f.Submit, "\n"+strings.Join(results, "")+"\n")
}

// ==================================================================

func buildControl(form *Form, id, name, help string) (map[string]string, string) {
	var errs, messages string
	attrs := map[string]string{}

	fid := fmt.Sprintf("%s%s", form.Name, id)
	if len(form.Validators[id]) > 0 {

		// Recorrer una primera vez las validaciones para construir el p.
		// Recorrerlas a la misma vez a√±adiendo errores y mensajes que luego
		// se juntan al terminar con el verdadero mensaje.
		var valErrors, showErrs string
		for _, val := range form.Validators[id] {
			update(attrs, val.Attrs)

			if val.User {
				errs += fmt.Sprintf("%s || ", val.Error)
				showErrs += " || " + val.Error
			} else {
				errs += fmt.Sprintf("%s.%s.$error.%s || ", form.Name, fid, val.Error)
			}

			var e string
			if val.User {
				e = val.Error
			} else {
				e = fmt.Sprintf("%s.%s.$error.%s", form.Name, fid, val.Error)
			}
			valErrors += fmt.Sprintf(`        <span ng-show="%s">`, e)
			valErrors += "\n          " + val.Message + "\n        </span>\n"
		}

		messages = fmt.Sprintf("\n      "+`<p class="help-block error" `+
			`ng-show="%s.val && (%s.%s.$invalid%s)">`+"\n", form.Name, form.Name, fid, showErrs)
		messages += valErrors
		messages += "      </p>"
	}
	if len(errs) > 0 {
		errs = fmt.Sprintf("(%s)", errs[:len(errs)-4])
	} else {
		errs = "false"
	}

	if name == "" {
		return attrs, fmt.Sprintf(`
  <div class="control-group" ng-class="%s.val && %s && 'error'">
    %%s%s
  </div>
    `, form.Name, errs, messages)
	}

	return attrs, fmt.Sprintf(`
  <div class="control-group" ng-class="%s.val && %s && 'error'">
    <label class="control-label" for="%s">%s</label>
    <div class="controls">
      %%s%s
    </div>
  </div>
  `, form.Name, errs, fid, name, messages)
}

// ==================================================================

type InputField struct {
	Id, Name    string
	Help        string
	Type        string
	Class       []string
	PlaceHolder string

	Attrs map[string]string
}

func (f *InputField) Build(form *Form) string {
	if f.Type == "" {
		panic("input type should not be empty: " + f.Id)
	}

	attrs := map[string]string{
		"type":        f.Type,
		"id":          fmt.Sprintf("%s%s", form.Name, f.Id),
		"name":        fmt.Sprintf("%s%s", form.Name, f.Id),
		"placeholder": f.PlaceHolder,
		"class":       strings.Join(f.Class, " "),
		"ng-model":    fmt.Sprintf("%s.%s", form.ObjName, f.Id),
	}
	update(attrs, f.Attrs)

	controlAttrs, control := buildControl(form, f.Id, f.Name, f.Help)
	update(attrs, controlAttrs)

	ctrl := buildCtrl("<input", ">", attrs)
	return fmt.Sprintf(control, ctrl)
}

// ==================================================================

type SubmitField struct {
	Label       string
	CancelUrl   string
	CancelLabel string
}

func (f *SubmitField) Build(form *Form) string {
	cancel := ""
	if f.CancelLabel != "" && f.CancelUrl != "" {
		cancel = fmt.Sprintf("\n"+`&nbsp;&nbsp;&nbsp;<a href="%s" class="btn">%s</a>`,
			f.CancelUrl, f.CancelLabel)
	}

	return fmt.Sprintf(`
  <div class="form-actions">
    <button ng-click="%s(); %s.val = true;" class="btn btn-primary"
      ng-disabled="%s.val && !%s.$valid">%s</button>%s
  </div>
  `, form.TrySubmit, form.Name, form.Name, form.Name, f.Label, cancel)
}

// ==================================================================

type TextAreaField struct {
	Id, Name    string
	Help        string
	Class       []string
	Rows        int
	PlaceHolder string
}

func (f *TextAreaField) Build(form *Form) string {
	attrs := map[string]string{
		"id":          fmt.Sprintf("%s%s", form.Name, f.Id),
		"name":        fmt.Sprintf("%s%s", form.Name, f.Id),
		"placeholder": f.PlaceHolder,
		"class":       strings.Join(f.Class, " "),
		"ng-model":    fmt.Sprintf("%s.%s", form.ObjName, f.Id),
		"rows":        fmt.Sprintf("%d", f.Rows),
	}

	controlAttrs, control := buildControl(form, f.Id, f.Name, f.Help)
	update(attrs, controlAttrs)

	ctrl := buildCtrl("<textarea", "></textarea>", attrs)
	return fmt.Sprintf(control, ctrl)
}

// ==================================================================

type RadioBtnField struct {
	Id, Name string
	Help     string
	Values   map[string]string
}

func (f *RadioBtnField) Build(form *Form) string {
	_, control := buildControl(form, f.Id, f.Name, f.Help)
	model := fmt.Sprintf("%s.%s", form.ObjName, f.Id)

	ctrl := `<div class="btn-group">` + "\n"
	for k, v := range f.Values {
		ctrl += fmt.Sprintf(`        <button type="button" class="btn btn-primary" `+
			`ng-model="%s"`, model)
		ctrl += "\n            "
		ctrl += fmt.Sprintf(`btn-radio="'%s'">%s</button>`+"\n", k, v)
	}
	ctrl += "      </div>"

	return fmt.Sprintf(control, ctrl)
}

// ==================================================================

type DateField struct {
	Id, Name    string
	Help        string
	Values      map[string]string
	DateOptions string
	Class       []string
}

func (f *DateField) Build(form *Form) string {
	attrs := map[string]string{
		"type":     "text",
		"id":       fmt.Sprintf("%s%s", form.Name, f.Id),
		"name":     fmt.Sprintf("%s%s", form.Name, f.Id),
		"class":    strings.Join(f.Class, " "),
		"ng-model": fmt.Sprintf("%s.%s", form.ObjName, f.Id),
		"bs-date":  f.DateOptions,
	}

	controlAttrs, control := buildControl(form, f.Id, f.Name, f.Help)
	update(attrs, controlAttrs)

	ctrl := buildCtrl("<input readonly", ">", attrs)
	ctrl = fmt.Sprintf(`
      <div class="input-append date">
        %s
        <span class="add-on"><i class="icon-calendar"></i></span>
      </div>
  `, ctrl)
	return fmt.Sprintf(control, ctrl)
}

// ==================================================================

type SelectField struct {
	Id, Name                      string
	Help                          string
	Origin, OriginId, OriginLabel string
	Class                         []string
	Attrs                         map[string]string
	BlankId, BlankLabel           string
}

func (f *SelectField) Build(form *Form) string {
	attrs := map[string]string{
		"id":       fmt.Sprintf("%s%s", form.Name, f.Id),
		"name":     fmt.Sprintf("%s%s", form.Name, f.Id),
		"class":    strings.Join(f.Class, " "),
		"ng-model": fmt.Sprintf("%s.%s", form.ObjName, f.Id),
	}

	controlAttrs, control := buildControl(form, f.Id, f.Name, f.Help)
	update(attrs, controlAttrs)
	if f.Attrs != nil {
		update(attrs, f.Attrs)
	}

	ctrl := buildCtrl("<select", ">", attrs)
	if len(f.BlankId) > 0 {
		ctrl += "\n        "
		ctrl += fmt.Sprintf(`<option value="%s">%s</option>`, f.BlankId, f.BlankLabel)
	}
	ctrl += fmt.Sprintf("\n        "+
		`<option ng-repeat="item in %s" value="{{item.%s}}">{{item.%s}}</option>`,
		f.Origin, f.OriginId, f.OriginLabel)
	ctrl += "\n      </select>"
	return fmt.Sprintf(control, ctrl)
}

// ==================================================================

type CheckboxField struct {
	Id, Name string
	Help     string
}

func (f *CheckboxField) Build(form *Form) string {
	attrs := map[string]string{
		"type":     "checkbox",
		"id":       fmt.Sprintf("%s%s", form.Name, f.Id),
		"name":     fmt.Sprintf("%s%s", form.Name, f.Id),
		"ng-model": fmt.Sprintf("%s.%s", form.ObjName, f.Id),
	}

	ctrl := buildCtrl("<input", ">", attrs)
	return fmt.Sprintf(`
  <div class="control-group"><div class="controls">
    <label class="checkbox">
      %s
      %s
    </label>
  </div></div>
  `, ctrl, f.Name)
}
